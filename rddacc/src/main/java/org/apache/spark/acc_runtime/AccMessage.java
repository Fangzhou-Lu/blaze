// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

package org.apache.spark.acc_runtime;

public final class AccMessage {
  private AccMessage() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code acc_runtime.MsgType}
   */
  public enum MsgType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ACCREQUEST = 0;</code>
     */
    ACCREQUEST(0, 0),
    /**
     * <code>ACCGRANT = 1;</code>
     */
    ACCGRANT(1, 1),
    /**
     * <code>ACCREJECT = 2;</code>
     */
    ACCREJECT(2, 2),
    /**
     * <code>ACCFINISH = 3;</code>
     */
    ACCFINISH(3, 3),
    /**
     * <code>ACCDATA = 4;</code>
     */
    ACCDATA(4, 4),
    /**
     * <code>ACCFAILURE = 5;</code>
     */
    ACCFAILURE(5, 5),
    ;

    /**
     * <code>ACCREQUEST = 0;</code>
     */
    public static final int ACCREQUEST_VALUE = 0;
    /**
     * <code>ACCGRANT = 1;</code>
     */
    public static final int ACCGRANT_VALUE = 1;
    /**
     * <code>ACCREJECT = 2;</code>
     */
    public static final int ACCREJECT_VALUE = 2;
    /**
     * <code>ACCFINISH = 3;</code>
     */
    public static final int ACCFINISH_VALUE = 3;
    /**
     * <code>ACCDATA = 4;</code>
     */
    public static final int ACCDATA_VALUE = 4;
    /**
     * <code>ACCFAILURE = 5;</code>
     */
    public static final int ACCFAILURE_VALUE = 5;


    public final int getNumber() { return value; }

    public static MsgType valueOf(int value) {
      switch (value) {
        case 0: return ACCREQUEST;
        case 1: return ACCGRANT;
        case 2: return ACCREJECT;
        case 3: return ACCFINISH;
        case 4: return ACCDATA;
        case 5: return ACCFAILURE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<MsgType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<MsgType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MsgType>() {
            public MsgType findValueByNumber(int number) {
              return MsgType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.apache.spark.acc_runtime.AccMessage.getDescriptor().getEnumTypes().get(0);
    }

    private static final MsgType[] VALUES = values();

    public static MsgType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private MsgType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:acc_runtime.MsgType)
  }

  public interface DataOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 partition_id = 1;
    /**
     * <code>required int32 partition_id = 1;</code>
     */
    boolean hasPartitionId();
    /**
     * <code>required int32 partition_id = 1;</code>
     */
    int getPartitionId();

    // optional int32 width = 2;
    /**
     * <code>optional int32 width = 2;</code>
     */
    boolean hasWidth();
    /**
     * <code>optional int32 width = 2;</code>
     */
    int getWidth();

    // optional int64 size = 3;
    /**
     * <code>optional int64 size = 3;</code>
     */
    boolean hasSize();
    /**
     * <code>optional int64 size = 3;</code>
     */
    long getSize();

    // optional string path = 4;
    /**
     * <code>optional string path = 4;</code>
     */
    boolean hasPath();
    /**
     * <code>optional string path = 4;</code>
     */
    java.lang.String getPath();
    /**
     * <code>optional string path = 4;</code>
     */
    com.google.protobuf.ByteString
        getPathBytes();

    // optional int32 offset = 5;
    /**
     * <code>optional int32 offset = 5;</code>
     */
    boolean hasOffset();
    /**
     * <code>optional int32 offset = 5;</code>
     */
    int getOffset();

    // optional bool cached = 6;
    /**
     * <code>optional bool cached = 6;</code>
     */
    boolean hasCached();
    /**
     * <code>optional bool cached = 6;</code>
     */
    boolean getCached();

    // optional int64 bval = 7;
    /**
     * <code>optional int64 bval = 7;</code>
     */
    boolean hasBval();
    /**
     * <code>optional int64 bval = 7;</code>
     */
    long getBval();
  }
  /**
   * Protobuf type {@code acc_runtime.Data}
   */
  public static final class Data extends
      com.google.protobuf.GeneratedMessage
      implements DataOrBuilder {
    // Use Data.newBuilder() to construct.
    private Data(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Data(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Data defaultInstance;
    public static Data getDefaultInstance() {
      return defaultInstance;
    }

    public Data getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Data(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              partitionId_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              width_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              size_ = input.readInt64();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              path_ = input.readBytes();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              offset_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              cached_ = input.readBool();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              bval_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.acc_runtime.AccMessage.internal_static_acc_runtime_Data_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.acc_runtime.AccMessage.internal_static_acc_runtime_Data_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.acc_runtime.AccMessage.Data.class, org.apache.spark.acc_runtime.AccMessage.Data.Builder.class);
    }

    public static com.google.protobuf.Parser<Data> PARSER =
        new com.google.protobuf.AbstractParser<Data>() {
      public Data parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Data(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Data> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 partition_id = 1;
    public static final int PARTITION_ID_FIELD_NUMBER = 1;
    private int partitionId_;
    /**
     * <code>required int32 partition_id = 1;</code>
     */
    public boolean hasPartitionId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 partition_id = 1;</code>
     */
    public int getPartitionId() {
      return partitionId_;
    }

    // optional int32 width = 2;
    public static final int WIDTH_FIELD_NUMBER = 2;
    private int width_;
    /**
     * <code>optional int32 width = 2;</code>
     */
    public boolean hasWidth() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 width = 2;</code>
     */
    public int getWidth() {
      return width_;
    }

    // optional int64 size = 3;
    public static final int SIZE_FIELD_NUMBER = 3;
    private long size_;
    /**
     * <code>optional int64 size = 3;</code>
     */
    public boolean hasSize() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int64 size = 3;</code>
     */
    public long getSize() {
      return size_;
    }

    // optional string path = 4;
    public static final int PATH_FIELD_NUMBER = 4;
    private java.lang.Object path_;
    /**
     * <code>optional string path = 4;</code>
     */
    public boolean hasPath() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string path = 4;</code>
     */
    public java.lang.String getPath() {
      java.lang.Object ref = path_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          path_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string path = 4;</code>
     */
    public com.google.protobuf.ByteString
        getPathBytes() {
      java.lang.Object ref = path_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        path_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int32 offset = 5;
    public static final int OFFSET_FIELD_NUMBER = 5;
    private int offset_;
    /**
     * <code>optional int32 offset = 5;</code>
     */
    public boolean hasOffset() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 offset = 5;</code>
     */
    public int getOffset() {
      return offset_;
    }

    // optional bool cached = 6;
    public static final int CACHED_FIELD_NUMBER = 6;
    private boolean cached_;
    /**
     * <code>optional bool cached = 6;</code>
     */
    public boolean hasCached() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool cached = 6;</code>
     */
    public boolean getCached() {
      return cached_;
    }

    // optional int64 bval = 7;
    public static final int BVAL_FIELD_NUMBER = 7;
    private long bval_;
    /**
     * <code>optional int64 bval = 7;</code>
     */
    public boolean hasBval() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int64 bval = 7;</code>
     */
    public long getBval() {
      return bval_;
    }

    private void initFields() {
      partitionId_ = 0;
      width_ = 0;
      size_ = 0L;
      path_ = "";
      offset_ = 0;
      cached_ = false;
      bval_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPartitionId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, partitionId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, width_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt64(3, size_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getPathBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, offset_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, cached_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt64(7, bval_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, partitionId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, width_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, size_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getPathBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, offset_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, cached_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(7, bval_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.apache.spark.acc_runtime.AccMessage.Data parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.acc_runtime.AccMessage.Data parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.acc_runtime.AccMessage.Data parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.acc_runtime.AccMessage.Data parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.acc_runtime.AccMessage.Data parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.apache.spark.acc_runtime.AccMessage.Data parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.apache.spark.acc_runtime.AccMessage.Data parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.apache.spark.acc_runtime.AccMessage.Data parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.apache.spark.acc_runtime.AccMessage.Data parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.apache.spark.acc_runtime.AccMessage.Data parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.apache.spark.acc_runtime.AccMessage.Data prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code acc_runtime.Data}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.apache.spark.acc_runtime.AccMessage.DataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.acc_runtime.AccMessage.internal_static_acc_runtime_Data_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.acc_runtime.AccMessage.internal_static_acc_runtime_Data_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.acc_runtime.AccMessage.Data.class, org.apache.spark.acc_runtime.AccMessage.Data.Builder.class);
      }

      // Construct using org.apache.spark.acc_runtime.AccMessage.Data.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        partitionId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        width_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        size_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        path_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        offset_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        cached_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        bval_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.acc_runtime.AccMessage.internal_static_acc_runtime_Data_descriptor;
      }

      public org.apache.spark.acc_runtime.AccMessage.Data getDefaultInstanceForType() {
        return org.apache.spark.acc_runtime.AccMessage.Data.getDefaultInstance();
      }

      public org.apache.spark.acc_runtime.AccMessage.Data build() {
        org.apache.spark.acc_runtime.AccMessage.Data result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.apache.spark.acc_runtime.AccMessage.Data buildPartial() {
        org.apache.spark.acc_runtime.AccMessage.Data result = new org.apache.spark.acc_runtime.AccMessage.Data(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.partitionId_ = partitionId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.width_ = width_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.size_ = size_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.path_ = path_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.offset_ = offset_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.cached_ = cached_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.bval_ = bval_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.acc_runtime.AccMessage.Data) {
          return mergeFrom((org.apache.spark.acc_runtime.AccMessage.Data)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.acc_runtime.AccMessage.Data other) {
        if (other == org.apache.spark.acc_runtime.AccMessage.Data.getDefaultInstance()) return this;
        if (other.hasPartitionId()) {
          setPartitionId(other.getPartitionId());
        }
        if (other.hasWidth()) {
          setWidth(other.getWidth());
        }
        if (other.hasSize()) {
          setSize(other.getSize());
        }
        if (other.hasPath()) {
          bitField0_ |= 0x00000008;
          path_ = other.path_;
          onChanged();
        }
        if (other.hasOffset()) {
          setOffset(other.getOffset());
        }
        if (other.hasCached()) {
          setCached(other.getCached());
        }
        if (other.hasBval()) {
          setBval(other.getBval());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPartitionId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.spark.acc_runtime.AccMessage.Data parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.spark.acc_runtime.AccMessage.Data) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 partition_id = 1;
      private int partitionId_ ;
      /**
       * <code>required int32 partition_id = 1;</code>
       */
      public boolean hasPartitionId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 partition_id = 1;</code>
       */
      public int getPartitionId() {
        return partitionId_;
      }
      /**
       * <code>required int32 partition_id = 1;</code>
       */
      public Builder setPartitionId(int value) {
        bitField0_ |= 0x00000001;
        partitionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 partition_id = 1;</code>
       */
      public Builder clearPartitionId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        partitionId_ = 0;
        onChanged();
        return this;
      }

      // optional int32 width = 2;
      private int width_ ;
      /**
       * <code>optional int32 width = 2;</code>
       */
      public boolean hasWidth() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 width = 2;</code>
       */
      public int getWidth() {
        return width_;
      }
      /**
       * <code>optional int32 width = 2;</code>
       */
      public Builder setWidth(int value) {
        bitField0_ |= 0x00000002;
        width_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 width = 2;</code>
       */
      public Builder clearWidth() {
        bitField0_ = (bitField0_ & ~0x00000002);
        width_ = 0;
        onChanged();
        return this;
      }

      // optional int64 size = 3;
      private long size_ ;
      /**
       * <code>optional int64 size = 3;</code>
       */
      public boolean hasSize() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int64 size = 3;</code>
       */
      public long getSize() {
        return size_;
      }
      /**
       * <code>optional int64 size = 3;</code>
       */
      public Builder setSize(long value) {
        bitField0_ |= 0x00000004;
        size_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 size = 3;</code>
       */
      public Builder clearSize() {
        bitField0_ = (bitField0_ & ~0x00000004);
        size_ = 0L;
        onChanged();
        return this;
      }

      // optional string path = 4;
      private java.lang.Object path_ = "";
      /**
       * <code>optional string path = 4;</code>
       */
      public boolean hasPath() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string path = 4;</code>
       */
      public java.lang.String getPath() {
        java.lang.Object ref = path_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          path_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string path = 4;</code>
       */
      public com.google.protobuf.ByteString
          getPathBytes() {
        java.lang.Object ref = path_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          path_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string path = 4;</code>
       */
      public Builder setPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        path_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string path = 4;</code>
       */
      public Builder clearPath() {
        bitField0_ = (bitField0_ & ~0x00000008);
        path_ = getDefaultInstance().getPath();
        onChanged();
        return this;
      }
      /**
       * <code>optional string path = 4;</code>
       */
      public Builder setPathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        path_ = value;
        onChanged();
        return this;
      }

      // optional int32 offset = 5;
      private int offset_ ;
      /**
       * <code>optional int32 offset = 5;</code>
       */
      public boolean hasOffset() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 offset = 5;</code>
       */
      public int getOffset() {
        return offset_;
      }
      /**
       * <code>optional int32 offset = 5;</code>
       */
      public Builder setOffset(int value) {
        bitField0_ |= 0x00000010;
        offset_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 offset = 5;</code>
       */
      public Builder clearOffset() {
        bitField0_ = (bitField0_ & ~0x00000010);
        offset_ = 0;
        onChanged();
        return this;
      }

      // optional bool cached = 6;
      private boolean cached_ ;
      /**
       * <code>optional bool cached = 6;</code>
       */
      public boolean hasCached() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bool cached = 6;</code>
       */
      public boolean getCached() {
        return cached_;
      }
      /**
       * <code>optional bool cached = 6;</code>
       */
      public Builder setCached(boolean value) {
        bitField0_ |= 0x00000020;
        cached_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool cached = 6;</code>
       */
      public Builder clearCached() {
        bitField0_ = (bitField0_ & ~0x00000020);
        cached_ = false;
        onChanged();
        return this;
      }

      // optional int64 bval = 7;
      private long bval_ ;
      /**
       * <code>optional int64 bval = 7;</code>
       */
      public boolean hasBval() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int64 bval = 7;</code>
       */
      public long getBval() {
        return bval_;
      }
      /**
       * <code>optional int64 bval = 7;</code>
       */
      public Builder setBval(long value) {
        bitField0_ |= 0x00000040;
        bval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 bval = 7;</code>
       */
      public Builder clearBval() {
        bitField0_ = (bitField0_ & ~0x00000040);
        bval_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:acc_runtime.Data)
    }

    static {
      defaultInstance = new Data(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:acc_runtime.Data)
  }

  public interface TaskMsgOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .acc_runtime.MsgType type = 1;
    /**
     * <code>required .acc_runtime.MsgType type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>required .acc_runtime.MsgType type = 1;</code>
     */
    org.apache.spark.acc_runtime.AccMessage.MsgType getType();

    // optional string acc_id = 2;
    /**
     * <code>optional string acc_id = 2;</code>
     */
    boolean hasAccId();
    /**
     * <code>optional string acc_id = 2;</code>
     */
    java.lang.String getAccId();
    /**
     * <code>optional string acc_id = 2;</code>
     */
    com.google.protobuf.ByteString
        getAccIdBytes();

    // optional int32 task_id = 3;
    /**
     * <code>optional int32 task_id = 3;</code>
     */
    boolean hasTaskId();
    /**
     * <code>optional int32 task_id = 3;</code>
     */
    int getTaskId();

    // repeated .acc_runtime.Data data = 4;
    /**
     * <code>repeated .acc_runtime.Data data = 4;</code>
     */
    java.util.List<org.apache.spark.acc_runtime.AccMessage.Data> 
        getDataList();
    /**
     * <code>repeated .acc_runtime.Data data = 4;</code>
     */
    org.apache.spark.acc_runtime.AccMessage.Data getData(int index);
    /**
     * <code>repeated .acc_runtime.Data data = 4;</code>
     */
    int getDataCount();
    /**
     * <code>repeated .acc_runtime.Data data = 4;</code>
     */
    java.util.List<? extends org.apache.spark.acc_runtime.AccMessage.DataOrBuilder> 
        getDataOrBuilderList();
    /**
     * <code>repeated .acc_runtime.Data data = 4;</code>
     */
    org.apache.spark.acc_runtime.AccMessage.DataOrBuilder getDataOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code acc_runtime.TaskMsg}
   */
  public static final class TaskMsg extends
      com.google.protobuf.GeneratedMessage
      implements TaskMsgOrBuilder {
    // Use TaskMsg.newBuilder() to construct.
    private TaskMsg(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TaskMsg(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TaskMsg defaultInstance;
    public static TaskMsg getDefaultInstance() {
      return defaultInstance;
    }

    public TaskMsg getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TaskMsg(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.apache.spark.acc_runtime.AccMessage.MsgType value = org.apache.spark.acc_runtime.AccMessage.MsgType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              accId_ = input.readBytes();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              taskId_ = input.readInt32();
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                data_ = new java.util.ArrayList<org.apache.spark.acc_runtime.AccMessage.Data>();
                mutable_bitField0_ |= 0x00000008;
              }
              data_.add(input.readMessage(org.apache.spark.acc_runtime.AccMessage.Data.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          data_ = java.util.Collections.unmodifiableList(data_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.acc_runtime.AccMessage.internal_static_acc_runtime_TaskMsg_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.acc_runtime.AccMessage.internal_static_acc_runtime_TaskMsg_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.acc_runtime.AccMessage.TaskMsg.class, org.apache.spark.acc_runtime.AccMessage.TaskMsg.Builder.class);
    }

    public static com.google.protobuf.Parser<TaskMsg> PARSER =
        new com.google.protobuf.AbstractParser<TaskMsg>() {
      public TaskMsg parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TaskMsg(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TaskMsg> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required .acc_runtime.MsgType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private org.apache.spark.acc_runtime.AccMessage.MsgType type_;
    /**
     * <code>required .acc_runtime.MsgType type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .acc_runtime.MsgType type = 1;</code>
     */
    public org.apache.spark.acc_runtime.AccMessage.MsgType getType() {
      return type_;
    }

    // optional string acc_id = 2;
    public static final int ACC_ID_FIELD_NUMBER = 2;
    private java.lang.Object accId_;
    /**
     * <code>optional string acc_id = 2;</code>
     */
    public boolean hasAccId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string acc_id = 2;</code>
     */
    public java.lang.String getAccId() {
      java.lang.Object ref = accId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          accId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string acc_id = 2;</code>
     */
    public com.google.protobuf.ByteString
        getAccIdBytes() {
      java.lang.Object ref = accId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        accId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int32 task_id = 3;
    public static final int TASK_ID_FIELD_NUMBER = 3;
    private int taskId_;
    /**
     * <code>optional int32 task_id = 3;</code>
     */
    public boolean hasTaskId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 task_id = 3;</code>
     */
    public int getTaskId() {
      return taskId_;
    }

    // repeated .acc_runtime.Data data = 4;
    public static final int DATA_FIELD_NUMBER = 4;
    private java.util.List<org.apache.spark.acc_runtime.AccMessage.Data> data_;
    /**
     * <code>repeated .acc_runtime.Data data = 4;</code>
     */
    public java.util.List<org.apache.spark.acc_runtime.AccMessage.Data> getDataList() {
      return data_;
    }
    /**
     * <code>repeated .acc_runtime.Data data = 4;</code>
     */
    public java.util.List<? extends org.apache.spark.acc_runtime.AccMessage.DataOrBuilder> 
        getDataOrBuilderList() {
      return data_;
    }
    /**
     * <code>repeated .acc_runtime.Data data = 4;</code>
     */
    public int getDataCount() {
      return data_.size();
    }
    /**
     * <code>repeated .acc_runtime.Data data = 4;</code>
     */
    public org.apache.spark.acc_runtime.AccMessage.Data getData(int index) {
      return data_.get(index);
    }
    /**
     * <code>repeated .acc_runtime.Data data = 4;</code>
     */
    public org.apache.spark.acc_runtime.AccMessage.DataOrBuilder getDataOrBuilder(
        int index) {
      return data_.get(index);
    }

    private void initFields() {
      type_ = org.apache.spark.acc_runtime.AccMessage.MsgType.ACCREQUEST;
      accId_ = "";
      taskId_ = 0;
      data_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getDataCount(); i++) {
        if (!getData(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getAccIdBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, taskId_);
      }
      for (int i = 0; i < data_.size(); i++) {
        output.writeMessage(4, data_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getAccIdBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, taskId_);
      }
      for (int i = 0; i < data_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, data_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.apache.spark.acc_runtime.AccMessage.TaskMsg parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.acc_runtime.AccMessage.TaskMsg parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.acc_runtime.AccMessage.TaskMsg parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.acc_runtime.AccMessage.TaskMsg parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.acc_runtime.AccMessage.TaskMsg parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.apache.spark.acc_runtime.AccMessage.TaskMsg parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.apache.spark.acc_runtime.AccMessage.TaskMsg parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.apache.spark.acc_runtime.AccMessage.TaskMsg parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.apache.spark.acc_runtime.AccMessage.TaskMsg parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.apache.spark.acc_runtime.AccMessage.TaskMsg parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.apache.spark.acc_runtime.AccMessage.TaskMsg prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code acc_runtime.TaskMsg}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.apache.spark.acc_runtime.AccMessage.TaskMsgOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.acc_runtime.AccMessage.internal_static_acc_runtime_TaskMsg_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.acc_runtime.AccMessage.internal_static_acc_runtime_TaskMsg_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.acc_runtime.AccMessage.TaskMsg.class, org.apache.spark.acc_runtime.AccMessage.TaskMsg.Builder.class);
      }

      // Construct using org.apache.spark.acc_runtime.AccMessage.TaskMsg.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = org.apache.spark.acc_runtime.AccMessage.MsgType.ACCREQUEST;
        bitField0_ = (bitField0_ & ~0x00000001);
        accId_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        taskId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (dataBuilder_ == null) {
          data_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          dataBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.acc_runtime.AccMessage.internal_static_acc_runtime_TaskMsg_descriptor;
      }

      public org.apache.spark.acc_runtime.AccMessage.TaskMsg getDefaultInstanceForType() {
        return org.apache.spark.acc_runtime.AccMessage.TaskMsg.getDefaultInstance();
      }

      public org.apache.spark.acc_runtime.AccMessage.TaskMsg build() {
        org.apache.spark.acc_runtime.AccMessage.TaskMsg result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.apache.spark.acc_runtime.AccMessage.TaskMsg buildPartial() {
        org.apache.spark.acc_runtime.AccMessage.TaskMsg result = new org.apache.spark.acc_runtime.AccMessage.TaskMsg(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.accId_ = accId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.taskId_ = taskId_;
        if (dataBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            data_ = java.util.Collections.unmodifiableList(data_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.data_ = data_;
        } else {
          result.data_ = dataBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.acc_runtime.AccMessage.TaskMsg) {
          return mergeFrom((org.apache.spark.acc_runtime.AccMessage.TaskMsg)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.acc_runtime.AccMessage.TaskMsg other) {
        if (other == org.apache.spark.acc_runtime.AccMessage.TaskMsg.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasAccId()) {
          bitField0_ |= 0x00000002;
          accId_ = other.accId_;
          onChanged();
        }
        if (other.hasTaskId()) {
          setTaskId(other.getTaskId());
        }
        if (dataBuilder_ == null) {
          if (!other.data_.isEmpty()) {
            if (data_.isEmpty()) {
              data_ = other.data_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureDataIsMutable();
              data_.addAll(other.data_);
            }
            onChanged();
          }
        } else {
          if (!other.data_.isEmpty()) {
            if (dataBuilder_.isEmpty()) {
              dataBuilder_.dispose();
              dataBuilder_ = null;
              data_ = other.data_;
              bitField0_ = (bitField0_ & ~0x00000008);
              dataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDataFieldBuilder() : null;
            } else {
              dataBuilder_.addAllMessages(other.data_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        for (int i = 0; i < getDataCount(); i++) {
          if (!getData(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.spark.acc_runtime.AccMessage.TaskMsg parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.spark.acc_runtime.AccMessage.TaskMsg) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .acc_runtime.MsgType type = 1;
      private org.apache.spark.acc_runtime.AccMessage.MsgType type_ = org.apache.spark.acc_runtime.AccMessage.MsgType.ACCREQUEST;
      /**
       * <code>required .acc_runtime.MsgType type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .acc_runtime.MsgType type = 1;</code>
       */
      public org.apache.spark.acc_runtime.AccMessage.MsgType getType() {
        return type_;
      }
      /**
       * <code>required .acc_runtime.MsgType type = 1;</code>
       */
      public Builder setType(org.apache.spark.acc_runtime.AccMessage.MsgType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .acc_runtime.MsgType type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = org.apache.spark.acc_runtime.AccMessage.MsgType.ACCREQUEST;
        onChanged();
        return this;
      }

      // optional string acc_id = 2;
      private java.lang.Object accId_ = "";
      /**
       * <code>optional string acc_id = 2;</code>
       */
      public boolean hasAccId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string acc_id = 2;</code>
       */
      public java.lang.String getAccId() {
        java.lang.Object ref = accId_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          accId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string acc_id = 2;</code>
       */
      public com.google.protobuf.ByteString
          getAccIdBytes() {
        java.lang.Object ref = accId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          accId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string acc_id = 2;</code>
       */
      public Builder setAccId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        accId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string acc_id = 2;</code>
       */
      public Builder clearAccId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        accId_ = getDefaultInstance().getAccId();
        onChanged();
        return this;
      }
      /**
       * <code>optional string acc_id = 2;</code>
       */
      public Builder setAccIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        accId_ = value;
        onChanged();
        return this;
      }

      // optional int32 task_id = 3;
      private int taskId_ ;
      /**
       * <code>optional int32 task_id = 3;</code>
       */
      public boolean hasTaskId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 task_id = 3;</code>
       */
      public int getTaskId() {
        return taskId_;
      }
      /**
       * <code>optional int32 task_id = 3;</code>
       */
      public Builder setTaskId(int value) {
        bitField0_ |= 0x00000004;
        taskId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 task_id = 3;</code>
       */
      public Builder clearTaskId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        taskId_ = 0;
        onChanged();
        return this;
      }

      // repeated .acc_runtime.Data data = 4;
      private java.util.List<org.apache.spark.acc_runtime.AccMessage.Data> data_ =
        java.util.Collections.emptyList();
      private void ensureDataIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          data_ = new java.util.ArrayList<org.apache.spark.acc_runtime.AccMessage.Data>(data_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          org.apache.spark.acc_runtime.AccMessage.Data, org.apache.spark.acc_runtime.AccMessage.Data.Builder, org.apache.spark.acc_runtime.AccMessage.DataOrBuilder> dataBuilder_;

      /**
       * <code>repeated .acc_runtime.Data data = 4;</code>
       */
      public java.util.List<org.apache.spark.acc_runtime.AccMessage.Data> getDataList() {
        if (dataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(data_);
        } else {
          return dataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .acc_runtime.Data data = 4;</code>
       */
      public int getDataCount() {
        if (dataBuilder_ == null) {
          return data_.size();
        } else {
          return dataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .acc_runtime.Data data = 4;</code>
       */
      public org.apache.spark.acc_runtime.AccMessage.Data getData(int index) {
        if (dataBuilder_ == null) {
          return data_.get(index);
        } else {
          return dataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .acc_runtime.Data data = 4;</code>
       */
      public Builder setData(
          int index, org.apache.spark.acc_runtime.AccMessage.Data value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataIsMutable();
          data_.set(index, value);
          onChanged();
        } else {
          dataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .acc_runtime.Data data = 4;</code>
       */
      public Builder setData(
          int index, org.apache.spark.acc_runtime.AccMessage.Data.Builder builderForValue) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.set(index, builderForValue.build());
          onChanged();
        } else {
          dataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .acc_runtime.Data data = 4;</code>
       */
      public Builder addData(org.apache.spark.acc_runtime.AccMessage.Data value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataIsMutable();
          data_.add(value);
          onChanged();
        } else {
          dataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .acc_runtime.Data data = 4;</code>
       */
      public Builder addData(
          int index, org.apache.spark.acc_runtime.AccMessage.Data value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataIsMutable();
          data_.add(index, value);
          onChanged();
        } else {
          dataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .acc_runtime.Data data = 4;</code>
       */
      public Builder addData(
          org.apache.spark.acc_runtime.AccMessage.Data.Builder builderForValue) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.add(builderForValue.build());
          onChanged();
        } else {
          dataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .acc_runtime.Data data = 4;</code>
       */
      public Builder addData(
          int index, org.apache.spark.acc_runtime.AccMessage.Data.Builder builderForValue) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.add(index, builderForValue.build());
          onChanged();
        } else {
          dataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .acc_runtime.Data data = 4;</code>
       */
      public Builder addAllData(
          java.lang.Iterable<? extends org.apache.spark.acc_runtime.AccMessage.Data> values) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          super.addAll(values, data_);
          onChanged();
        } else {
          dataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .acc_runtime.Data data = 4;</code>
       */
      public Builder clearData() {
        if (dataBuilder_ == null) {
          data_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          dataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .acc_runtime.Data data = 4;</code>
       */
      public Builder removeData(int index) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.remove(index);
          onChanged();
        } else {
          dataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .acc_runtime.Data data = 4;</code>
       */
      public org.apache.spark.acc_runtime.AccMessage.Data.Builder getDataBuilder(
          int index) {
        return getDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .acc_runtime.Data data = 4;</code>
       */
      public org.apache.spark.acc_runtime.AccMessage.DataOrBuilder getDataOrBuilder(
          int index) {
        if (dataBuilder_ == null) {
          return data_.get(index);  } else {
          return dataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .acc_runtime.Data data = 4;</code>
       */
      public java.util.List<? extends org.apache.spark.acc_runtime.AccMessage.DataOrBuilder> 
           getDataOrBuilderList() {
        if (dataBuilder_ != null) {
          return dataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(data_);
        }
      }
      /**
       * <code>repeated .acc_runtime.Data data = 4;</code>
       */
      public org.apache.spark.acc_runtime.AccMessage.Data.Builder addDataBuilder() {
        return getDataFieldBuilder().addBuilder(
            org.apache.spark.acc_runtime.AccMessage.Data.getDefaultInstance());
      }
      /**
       * <code>repeated .acc_runtime.Data data = 4;</code>
       */
      public org.apache.spark.acc_runtime.AccMessage.Data.Builder addDataBuilder(
          int index) {
        return getDataFieldBuilder().addBuilder(
            index, org.apache.spark.acc_runtime.AccMessage.Data.getDefaultInstance());
      }
      /**
       * <code>repeated .acc_runtime.Data data = 4;</code>
       */
      public java.util.List<org.apache.spark.acc_runtime.AccMessage.Data.Builder> 
           getDataBuilderList() {
        return getDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          org.apache.spark.acc_runtime.AccMessage.Data, org.apache.spark.acc_runtime.AccMessage.Data.Builder, org.apache.spark.acc_runtime.AccMessage.DataOrBuilder> 
          getDataFieldBuilder() {
        if (dataBuilder_ == null) {
          dataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              org.apache.spark.acc_runtime.AccMessage.Data, org.apache.spark.acc_runtime.AccMessage.Data.Builder, org.apache.spark.acc_runtime.AccMessage.DataOrBuilder>(
                  data_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          data_ = null;
        }
        return dataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:acc_runtime.TaskMsg)
    }

    static {
      defaultInstance = new TaskMsg(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:acc_runtime.TaskMsg)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_acc_runtime_Data_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_acc_runtime_Data_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_acc_runtime_TaskMsg_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_acc_runtime_TaskMsg_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\ntask.proto\022\013acc_runtime\"u\n\004Data\022\024\n\014par" +
      "tition_id\030\001 \002(\005\022\r\n\005width\030\002 \001(\005\022\014\n\004size\030\003" +
      " \001(\003\022\014\n\004path\030\004 \001(\t\022\016\n\006offset\030\005 \001(\005\022\016\n\006ca" +
      "ched\030\006 \001(\010\022\014\n\004bval\030\007 \001(\003\"o\n\007TaskMsg\022\"\n\004t" +
      "ype\030\001 \002(\0162\024.acc_runtime.MsgType\022\016\n\006acc_i" +
      "d\030\002 \001(\t\022\017\n\007task_id\030\003 \001(\005\022\037\n\004data\030\004 \003(\0132\021" +
      ".acc_runtime.Data*b\n\007MsgType\022\016\n\nACCREQUE" +
      "ST\020\000\022\014\n\010ACCGRANT\020\001\022\r\n\tACCREJECT\020\002\022\r\n\tACC" +
      "FINISH\020\003\022\013\n\007ACCDATA\020\004\022\016\n\nACCFAILURE\020\005B*\n" +
      "\034org.apache.spark.acc_runtimeB\nAccMessag",
      "e"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_acc_runtime_Data_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_acc_runtime_Data_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_acc_runtime_Data_descriptor,
              new java.lang.String[] { "PartitionId", "Width", "Size", "Path", "Offset", "Cached", "Bval", });
          internal_static_acc_runtime_TaskMsg_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_acc_runtime_TaskMsg_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_acc_runtime_TaskMsg_descriptor,
              new java.lang.String[] { "Type", "AccId", "TaskId", "Data", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
